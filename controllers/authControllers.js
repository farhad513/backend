const adminModel = require("../models/adminModel");
const hospitalModel = require("../models/hospital.model");
const sellerCustomerModel = require("../models/chat/sellerCustomerModel");
const bcrpty = require("bcrypt");
const formidable = require("formidable");
const cloudinary = require("cloudinary").v2;
const { responseReturn } = require("../utiles/response");
const { createToken } = require("../utiles/tokenCreate");
const mongoose = require("mongoose");
const redis = require("../utiles/Redis");
const userModel = require("../models/userModel");
// admin login
const admin_login = async (req, res) => {
  const { email, password } = req.body;

  try {
    // Input validation
    if (!email || !password) {
      return responseReturn(res, 400, {
        error: "‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶â‡¶≠‡ßü‡¶á ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï‡•§",
      });
    }

    // Find admin by email
    const admin = await adminModel.findOne({ email }).select("+password");
    if (!admin) {
      return responseReturn(res, 404, {
        error:
          "‡¶è‡¶á ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ‡¶ü‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¶‡¶ø‡¶®‡•§",
      });
    }

    // Compare password
    const isPasswordMatch = await bcrpty.compare(password, admin.password);
    if (!isPasswordMatch) {
      return responseReturn(res, 401, {
        error: "‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§",
      });
    }

    // Create token
    const token = await createToken({
      id: admin.id,
      role: admin.role,
    });

    // Set secure cookie
    res.cookie("accessToken", token, {
      httpOnly: true, // üîí Security best practice
      secure: process.env.NODE_ENV === "production", // Only HTTPS in production
      sameSite: "strict", // CSRF protection
      expires: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
    });

    // Success response
    return responseReturn(res, 200, {
      token,
      message: "‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§",
    });
  } catch (error) {
    return responseReturn(res, 500, {
      error: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    });
  }
};

// hospital login
const hospital_login = async (req, res) => {
  const { email, password  } = req.body;
  
  try {
    // Input validation
    if (!email || !password) {
      return responseReturn(res, 400, {
        error: "‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶â‡¶≠‡ßü‡¶á ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï‡•§",
      });
    }

    // Find hospital by email
    const hospital = await hospitalModel.findOne({ email }).select("+password");
    if (!hospital) {
      return responseReturn(res, 404, {
        error: "‡¶è‡¶á ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ‡¶ü‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¶‡¶ø‡¶®‡•§",
      });
    }

    // Compare password
    const isPasswordMatch = await bcrpty.compare(password, hospital.password);
    if (!isPasswordMatch) {
      return responseReturn(res, 401, {
        error: "‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§",
      });
    }

   
    // Create token
    const token = await createToken({
      id: hospital.id,
      role: hospital.role,
      status: hospital.status,
    });

    // Set secure cookie
    res.cookie("accessToken", token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
expires: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)
    });

    return responseReturn(res, 200, {
      token,
      message: `‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤ ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`,
    });
  } catch (error) {
    return responseReturn(res, 500, {
      error: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    });
  }
};


// hospital register
const hospital_register = async (req, res) => {
  const { email, name, password, phone } = req.body;

  try {
    // Input validation
    if (!email || !name || !password || !phone) {
      return responseReturn(res, 400, {
        error: "‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶ï‡¶≤ ‡¶ò‡¶∞ ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      });
    }

    if (password.length < 6) {
      return responseReturn(res, 400, {
        error: "‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß¨ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§",
      });
    }

    // Check if email already exists
    const existingUser = await hospitalModel.findOne({ email });
    if (existingUser) {
      return responseReturn(res, 409, {
        error:
          "‡¶è‡¶á ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ‡¶ü‡¶ø ‡¶á‡¶§‡ßã‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¶‡¶ø‡¶®‡•§",
      });
    }

    // Create hospital account
    const hashedPassword = await bcrpty.hash(password, 10);
    const hospital = await hospitalModel.create({
      name,
      email,
      password: hashedPassword,
      phone,
    });

    // Create seller-customer mapping
    await sellerCustomerModel.create({
      myId: hospital.id,
    });

    // Generate token
    const token = await createToken({
      id: hospital.id,
      role: hospital.role,
      status: hospital.status,
    });

    // Set cookie
    res.cookie("accessToken", token, {
      httpOnly: true, // üîí Security best practice
      secure: process.env.NODE_ENV === "production", // Only HTTPS in production
      sameSite: "strict", // CSRF protection
      expires: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
    });

    // Send success response
    return responseReturn(res, 201, {
      token,
      message: ` ‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤ ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!`,
    });
  } catch (error) {
    return responseReturn(res, 500, {
      error: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    });
  }
};

// saved notification token
const pushTokenNot = async (req, res) => {
    const { pushToken } = req.body;
    const userId = req.id; // JWT middleware ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶¨‡ßá
  try {
    // ID valid ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ


   
     if (!pushToken) {
      return res.status(400).json({ message: "Token missing" });
    }
  const hospital = await hospitalModel.findById(userId);
    if (!hospital) return res.status(404).json({ error: "Hospital not found" });
    hospital.expoPushToken = pushToken; // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßã
    await hospital.save();
    return responseReturn(res, 200, { hospital, message :"Push token saved"  });
  } catch (error) {
    return responseReturn(res, 500, {
      error: "‡¶≠‡¶æ‡¶á, ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    });
  }
};

const pushTokenNotAdmin = async (req, res) => {
    const { pushToken } = req.body;
    const userId = req.id; // JWT middleware ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶¨‡ßá
  try {
    // ID valid ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ


   
     if (!pushToken) {
      return res.status(400).json({ message: "Token missing" });
    }
  const admin = await adminModel.findById(userId);
    if (!admin) return res.status(404).json({ error: "Admin not found" });
    admin.expoPushToken = pushToken; // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßã
    await admin.save();
    return responseReturn(res, 200, { admin, message :"Push token saved"  });
  } catch (error) {
    console.error("‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error);
    return responseReturn(res, 500, {
      error: "‡¶≠‡¶æ‡¶á, ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    });
  }
};



const getUser = async (req, res) => {
  const { id, role } = req;

  try {
    // ID valid ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return responseReturn(res, 400, {
        error: "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      });
    }

    const cacheKey = `${role}:${id}`;
    const cachedData = await redis.get(cacheKey);

    // ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ‡¶á ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®
    if (cachedData) {
      return responseReturn(res, 200, {
        userInfo: JSON.parse(cachedData),
        cache: true,
      });
    }

    // ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ
    let userInfo;
    if (role === "admin") {
      userInfo = await adminModel.findById(id).lean();
    } else {
      userInfo = await hospitalModel.findById(id).lean();
    }

    // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá
    if (!userInfo) {
      return responseReturn(res, 404, {
        error: "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§",
      });
    }

    // ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ (‡ßß ‡¶¶‡¶ø‡¶® = 86400 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°)
    // await redis.set(cacheKey, JSON.stringify(userInfo), "EX", 86400);
    return responseReturn(res, 200, { userInfo, cache: false });
  } catch (error) {
    console.error("‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error);
    return responseReturn(res, 500, {
      error: "‡¶≠‡¶æ‡¶á, ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    });
  }
};
// profile image upload
const profile_image_upload = async (req, res) => {
  const { id } = req;

  // Parse form data using formidable
  const form = formidable({ multiples: false, keepExtensions: true });

  form.parse(req, async (err, fields, files) => {
    if (err) {
      return responseReturn(res, 400, {
        error: "‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
      });
    }

    try {
      // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶π‡¶∏‡¶™‡¶ø‡¶ü‡¶æ‡¶≤‡ßá‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡ßã
      const hospital = await hospitalModel.findById(id);

      if (!hospital) {
        return responseReturn(res, 404, { error: "‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§" });
      }

      // ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á image ‡¶•‡¶æ‡¶ï‡ßá ‚Üí update ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡ßá ‡¶¶‡¶æ‡¶ì
      if (hospital.image) {
        return responseReturn(res, 400, {
          error: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®, ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§",
        });
      }

      const { image } = files;
      if (!image) {
        return responseReturn(res, 400, { error: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø‡•§" });
      }

      // Validate image file type and size
      const allowedMimeTypes = ["image/jpeg", "image/png", "image/gif"];
      const maxSize = 1 * 1024 * 1024; // ‡ßßMB

      if (image.mimetype === "application/pdf") {
        return responseReturn(res, 400, {
          error:
            "PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ JPG, PNG ‡¶Ö‡¶•‡¶¨‡¶æ GIF ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        });
      }

      if (!allowedMimeTypes.includes(image.mimetype)) {
        return responseReturn(res, 400, {
          error: "‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ JPG, PNG ‡¶è‡¶¨‡¶Ç GIF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§",
        });
      }

      if (image.size > maxSize) {
        return responseReturn(res, 400, {
          error: "‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶Ü‡¶ï‡¶æ‡¶∞ ‡ßßMB ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§",
        });
      }

      // Cloudinary config
      cloudinary.config({
        cloud_name: process.env.cloud_name,
        api_key: process.env.api_key,
        api_secret: process.env.api_secret,
        secure: true,
      });

      // ‡¶®‡¶§‡ßÅ‡¶® ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ (‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ü‡¶ó‡ßá ‡¶ï‡ßã‡¶®‡ßã image ‡¶õ‡¶ø‡¶≤ ‡¶®‡¶æ)
      const result = await cloudinary.uploader.upload(image.filepath, {
        folder: "profile",
        public_id: `profile-${id}`,
        resource_type: "image",
        overwrite: false,
      });

      if (result) {
        // ‡¶®‡¶§‡ßÅ‡¶® ‡¶õ‡¶¨‡¶ø URL ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
        await hospitalModel.findByIdAndUpdate(id, { image: result.url });

        // ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶á‡¶®‡¶´‡ßã ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ
        const userInfo = await hospitalModel.findById(id);

        return responseReturn(res, 201, {
          message: "‡¶õ‡¶¨‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
          userInfo,
        });
      } else {
        return responseReturn(res, 500, { error: "‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§" });
      }
    } catch (error) {
      console.error(error);
      return responseReturn(res, 500, {
        error: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      });
    }
  });
};


// profile info add
const profile_info_add = async (req, res) => {
  const {
    division,
    district,
    upazila,
    address,
    type,
    license,
    website,
    emergency,
    openingTime,
    closingTime,
    billDiscount,
    pathologyDiscount,
  } = req.body;

  const { id } = req;

  try {
    const hospital = await hospitalModel.findById(id).select("profileUpdated");

    if (!hospital) {
      return responseReturn(res, 404, {
        error: "‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§",
      });
    }

    if (hospital.profileUpdated) {
      return responseReturn(res, 400, {
        error:
          "‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶∞‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      });
    }

    const updateData = {
      division,
      district,
      upazila,
      address,
      type,
      license,
      website,
      emergency,
      openingTime,
      closingTime,
      billDiscount,
      pathologyDiscount,
      profileUpdated: true,
    };

    const updatedHospital = await hospitalModel
      .findByIdAndUpdate(
        id,
        { $set: updateData },
        { new: true, runValidators: true, context: "query" }
      )
      .lean();

    // üî• ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ (‡¶Ø‡¶¶‡¶ø hospital:{id} ‡¶®‡¶æ‡¶Æ‡ßá ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡ßá)
    await redis.del(`hospital:${id}`);

    // ‚úÖ ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶á ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶∏‡ßá‡¶ü‡¶ì ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã, ‡¶ß‡¶∞‡ßã:
    await redis.set(
      `hospital:${id}`,
      JSON.stringify(updatedHospital),
      "EX",
      900 // ‡ßß‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü
    );

    return responseReturn(res, 201, {
      message: "‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
      userInfo: updatedHospital,
    });
  } catch (error) {
    console.error("Profile Info Update Error:", error);
    return responseReturn(res, 500, {
      error: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá‡•§ ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    });
  }
};

//  logout
const logout = async (req, res) => {
  console.log(req.id, "req thake id");
  try {
    // Token Cookie clear ‡¶ï‡¶∞‡¶æ
    res.clearCookie("accessToken", {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
    });

    // ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶Ø‡¶¶‡¶ø req.id ‡¶•‡¶æ‡¶ï‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶ü‡¶æ hospital id)
    if (req.id) {
      await redis.del(`hospital:${req.id}`);
    }

    return responseReturn(res, 200, { message: "‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§" });
  } catch (error) {
    console.error("Logout Error:", error);
    return responseReturn(res, 500, {
      error: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    });
  }
};

const get_all_users = async (req, res) => {
  let { page = 1, parPage = 5, searchValue = "" } = req.query;

  page = parseInt(page);
  parPage = parseInt(parPage);
  const skip = (page - 1) * parPage;

  const searchQuery = {};

  if (searchValue) {
    searchQuery["$or"] = [
      { name: { $regex: searchValue, $options: "i" } },
      { email: { $regex: searchValue, $options: "i" } },
      { phone: { $regex: searchValue, $options: "i" } },
    ];
  }

  try {
    const users = await userModel
      .find(searchQuery)
      .skip(skip)
      .limit(parPage)
      .sort({ createdAt: -1 });

    const totalUsers = await userModel.countDocuments(searchQuery);

    responseReturn(res, 200, {
      totalUsers,
      users,
    });
  } catch (error) {
    responseReturn(res, 500, { error: error.message });
  }
};

module.exports = {
  admin_login,
  hospital_login,
  hospital_register,
  getUser,
  profile_image_upload,
  profile_info_add,
  logout,
  get_all_users,
  pushTokenNot,
  pushTokenNotAdmin
};
